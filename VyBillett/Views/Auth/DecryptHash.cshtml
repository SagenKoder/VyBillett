
<script src="~/Scripts/jquery-1.10.2.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>
<script type="text/javascript">
    $(function () {
        $("#hentHash").click(function () {
            var streng = $("#innStreng").val();
            $.ajax({
                url: '/Sikkerhet/HashStreng/',
                data: { innStreng: streng },
                //dataType: 'json',
                success: function (hash) {
                    $("#utHash").html(hash);
                    //pack(hash);
                },
                error: function (x, y, z) {
                    alert(x + '\n' + y + '\n' + z);
                }
            });
        });
    })
</script>
<h2>Decrypt Hash</h2>

En hash en kryptert streng som ikke lar seg "reversere".
<br />
Det vil si at man ikke kan finne den opprinnelige strengen ut i fra den genererte hash.
<br />
<br />


Skriv inn en streng (et enkelt ord i første omgang) og trykk "Hent Hash" (Hash'en blir ikke saltet)
<br />
<br />
<input type="text" id="innStreng" />
<button id="hentHash" class="btn btn-success">Hent Hash</button>
@Html.ActionLink("Tilbake", "Index", new { tom = "" }, new { @class = "btn btn-primary" })
<br />
<br />
Hash : <div id="utHash" class="well"></div>

Kopier den genererte hash og prøv å "dekryptere" strengen her :  <a href="http://md5decrypt.net/en/Sha256/" target="_blank">DeCrypt</a>
<br />
<br />
Enkle strenger vil kunne "dekrypteres".
<br />
<br />

Dette fordi denne "dekrypterngen" består av et oppslag mot en database hvor genererte hash'er er lagret for en masse strenger.
<br />
Antall strenger som ligger i databasen er mange milliarder og øker for hver ikke eksisterende "Encrypt" som gjøres.
<br />
<br />

Dette viser behovet for å <b>salte</b> passord når brukeren velger å bruke et dårlig passord.




